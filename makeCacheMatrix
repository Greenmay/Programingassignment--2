## Example:
##  > source('Cachematrix.R')
##  > data<-makeCacheMatrix(matrix(c(3,1,1,3),c(2,2)))
##  > cacheSolve(data)
##        [,1]   [,2]
##  [1,]  0.375 -0.125
##  [2,] -0.125  0.375


## The first function, makeCacheMatrix creates a special "vector", 
## which is really a list containing a function to 
## 1. set the value of the matrix;
## 2. get the value of the matrix;
## 3. set the value of the inverse matrix;
## 4. get the value of the inverse matrix. 


makeCacheMatrix<-function(x=Matrix()){
  i<-NULL
  set<-function(y){
    x<<-y
    i<<-NULL
  }
  get<-function()x
  setinverse<-function(inv)i<<-inv
  getinverse<-function()i
  list(set=set,get=get,
       setinverse=setinverse,
       getinverse=getinverse)
  
  
  
}

## Calculate the inverse of the matrix created with the above function,
## reusing cached result if it is available.

 cacheSolve<-function(x,...){
  i<-x$getinverse()
  if(!is.null(i)){
    message("getting cached data")
    return(i)
    
    
  }
  data<-x$get()
  i<-solve(data,...)
  x$setinverse(i)
  i
}
